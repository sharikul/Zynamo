{"name":"Zynamo","tagline":"PHP based templating engine. Doesn't support things like @foreach loops as such.","body":"# Meet Zynamo: A Very Basic Templating Engine\r\nZynamo is a new templating engine written in PHP **for use in PHP**. It allows you to store commonly typed words and characters in a key which can then be referenced in a PHP script, and when that script is processed through the Zynamo processor, it will be replaced with the respective value.\r\n\r\n## Begin using Zynamo\r\nClone the Zynamo repository in your WWW directory on your computer. If you don't have this folder, search for _Wamp Server_ if you're using Windows, _Mamp Server_ if you're on a Mac, or _Lamp Server_ if you're a Linux/Ubuntu user.\r\n\r\nCD into the WWW directory and through a terminal, run this line of code:  \r\n```git clone https://github.com/sharikul/Zynamo.git```  \r\n\r\nThis will create a new folder called 'Zynamo'. Inside that folder will be three files: _README.md_, _zynamo\\_config.php_, and _zynamo\\_processor.php_.  \r\n\r\nThe files you will need to know about are the two which start with _zynamo__*. \r\n\r\n### Using _zynamo\\_config.php_\r\n_zynamo\\_config.php_ is the file where you will store keys with their values. This is the file that the Zynamo processor looks for when it's called. Upon first open, you'll see an empty array called `$items`. You should store keys in that array in the `key => value` format, like so:  \r\n```php \r\n$items = array(\r\n  \"name\" => \"Sharikul Islam\"\r\n);\r\n```  \r\n\r\nWhenever you reference the \"name\" key in your scripts, it will be replaced with its value, in this case, \"Sharikul Islam\", once it's run through the Zynamo processor. To reference a key in your script, use the `{{key}}` notation.  \r\n\r\n### Understanding _zynamo\\_processor.php_\r\nThis file processes Zynamo related keys in your PHP scripts. The file itself is a class file containing the `zynamo` class that will then be instantiated in your PHP scripts. The methods in this class are:  \r\n`process`,  \r\n`process_file`,  \r\n`process_files`.  \r\n\r\nEach method performs the processing process in different ways.  \r\n\r\n### Method 1: `process`  \r\nThe `process` method will process and update a file **in real time**.  \r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title> Welcome to {{name}}'s Website! </title>\r\n  </head>\r\n  <body>\r\n    <h1>Hi, this is the website of {{name}}!</h1>\r\n  </body>\r\n</html>\r\n```  \r\n\r\nAssuming that the HTML code above is saved in a **.php** file extension, once it's run through the Zynamo processor, `{{name}}` will be replaced with \"Sharikul Islam\" in the file directly. So you'll see:  \r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title> Welcome to Sharikul Islam's Website! </title>\r\n  </head>\r\n  <body>\r\n    <h1>Hi, this is the website of Sharikul Islam!</h1>\r\n  </body>\r\n</html>\r\n```  \r\n\r\n### Method 2: `process_file`  \r\nThe `process_file` method works quite differently from the `process` method. Instead of updating a file in real time, it instead requires you to create a new counterpart PHP file. For example, to create a new file called `index.php` with Zynamo keys, you should create a counterpart file prefixed with `**.zynamo**` in the middle, like so: `index.zynamo.php`. If `index.php` doesn't already exist, for example, the Zynamo processor will attempt to create it. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}